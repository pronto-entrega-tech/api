/* eslint-disable */
export default async () => {
    const t = {
        ["./customers/constants/social-providers"]: await import("./customers/constants/social-providers"),
        ["./markets/dto/update.dto"]: await import("./markets/dto/update.dto"),
        ["./auth/constants/sub-permissions"]: await import("./auth/constants/sub-permissions"),
        ["./markets/constants/market-enums"]: await import("./markets/constants/market-enums"),
        [".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"]: await import(".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"),
        ["./markets/dto/create.dto"]: await import("./markets/dto/create.dto"),
        ["./auth/constants/roles"]: await import("./auth/constants/roles"),
        ["./orders/constants/order-status"]: await import("./orders/constants/order-status"),
        ["./orders/dto/update.dto"]: await import("./orders/dto/update.dto"),
        ["./orders/dto/full-order-id.dto"]: await import("./orders/dto/full-order-id.dto"),
        ["./payments/constants/payment-methods"]: await import("./payments/constants/payment-methods"),
        ["./items/dto/feed.dto"]: await import("./items/dto/feed.dto"),
        ["./items/constants/discount-type"]: await import("./items/constants/discount-type"),
        ["./items/dto/create.dto"]: await import("./items/dto/create.dto"),
        ["./items/dto/update.dto"]: await import("./items/dto/update.dto"),
        ["./orders/constants/cancel-reasons"]: await import("./orders/constants/cancel-reasons"),
        ["./orders/create-order/create-order.dto"]: await import("./orders/create-order/create-order.dto"),
        ["./markets/dto/full-invoice-id"]: await import("./markets/dto/full-invoice-id"),
        ["./responses/auth.res"]: await import("./responses/auth.res"),
        ["./location/dto/address.dto"]: await import("./location/dto/address.dto"),
        ["./location/dto/coords.dto"]: await import("./location/dto/coords.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./customers/dto/create-card.dto"), { "CreateCardDto": { nickname: { required: false, type: () => String, minLength: 1, maxLength: 256 }, number: { required: true, type: () => String, minLength: 16, maxLength: 17 }, holderName: { required: true, type: () => String, minLength: 1, maxLength: 256 }, expiryMonth: { required: true, type: () => String, minLength: 2 }, expiryYear: { required: true, type: () => String, minLength: 4 }, cvv: { required: true, type: () => String, minLength: 3, maxLength: 4 } } }], [import("./customers/dto/create.dto"), { "CreateCustomerDto": { name: { required: true, type: () => String, minLength: 1, maxLength: 256 } }, "CustomerWSocialDto": { token: { required: true, type: () => String }, provider: { required: true, type: () => String, enum: t["./customers/constants/social-providers"].SocialProvider } } }], [import("./customers/dto/update.dto"), { "UpdateCustomerDto": { document: { required: false, type: () => String, minLength: 11 }, phone: { required: false, type: () => String } } }], [import("./customers/dto/update-card.dto"), { "UpdateCardDto": { nickname: { required: true, type: () => String, minLength: 1, maxLength: 256 } } }], [import("./customers/dto/create-address.dto"), { "CreateAddressDto": { nickname: { required: false, type: () => String, minLength: 1, maxLength: 256 }, street: { required: true, type: () => String, minLength: 1, maxLength: 256 }, number: { required: true, type: () => String, minLength: 1, maxLength: 256 }, district: { required: true, type: () => String, minLength: 1, maxLength: 256 }, city: { required: true, type: () => String, minLength: 1, maxLength: 256 }, state: { required: true, type: () => String, minLength: 1, maxLength: 256 }, complement: { required: false, type: () => String, minLength: 1, maxLength: 256 }, latitude: { required: true, type: () => Number }, longitude: { required: true, type: () => Number } } }], [import("./customers/dto/update-address.dto"), { "UpdateAddressDto": {} }], [import("./common/dto/filter.dto"), { "ItemByMarketFilter": { query: { required: false, type: () => String }, categories: { required: false, type: () => [Number] } }, "ItemFeedFilter": { ids: { required: false, type: () => [String] }, order_by: { required: true, type: () => Object, default: "DEFAULT" }, latLong: { required: false, type: () => String }, distance: { required: true, type: () => Number, default: 15, minimum: 1, maximum: 15 } }, "MarketFilter": {} }], [import("./markets/dto/update.dto"), { "SpecialDay": { date: { required: true, type: () => Date }, reason_code: { required: true, type: () => Number }, reason_name: { required: true, type: () => String, minLength: 1, maxLength: 256 }, open_time: { required: true, type: () => String }, close_time: { required: true, type: () => String } }, "UpdateBankAccountDto": {}, "UpdateMarketDto": { special_days: { required: false, type: () => [t["./markets/dto/update.dto"].SpecialDay] } } }], [import("./location/dto/address.dto"), { "AddressFromCoordsDto": { coords: { required: true, type: () => String } }, "AddressFromDocumentDto": { document: { required: true, type: () => String, minLength: 14, maxLength: 14 } }, "AddressRes": { street: { required: false, type: () => String }, number: { required: false, type: () => String }, district: { required: false, type: () => String }, city: { required: false, type: () => String }, state: { required: false, type: () => String } } }], [import("./location/dto/coords.dto"), { "CoordsDto": { address: { required: true, type: () => String } }, "CoordsRes": { lat: { required: true, type: () => Number }, lng: { required: true, type: () => Number } } }], [import("./payments/dto/create-customer-payer.dto"), { "CreateCustomerPayerDto": { customer_id: { required: true, type: () => String }, name: { required: true, type: () => String }, email: { required: true, type: () => String }, document: { required: false, type: () => String } }, "CustomerPayerReturnDto": { id: { required: true, type: () => String } } }], [import("./payments/dto/create-payer.dto"), { "CreatePayerDto": { market_id: { required: true, type: () => String } }, "PayerReturnDto": { payer_id: { required: true, type: () => String } } }], [import("./payments/dto/create-recipient.dto"), { "CreateRecipientDto": { market_id: { required: true, type: () => String } }, "RecipientReturnDto": { id: { required: true, type: () => String }, key: { required: true, type: () => String } } }], [import("./payments/dto/update-customer-payer.dto"), { "UpdateCustomerPayerDto": { payer_id: { required: true, type: () => String }, document: { required: true, type: () => String } } }], [import("./markets/dto/create-sub.dto"), { "CreateMarketSubDto": { name: { required: true, type: () => String, minLength: 1, maxLength: 256 }, permissions: { required: true, enum: t["./auth/constants/sub-permissions"].SubPermission, isArray: true } } }], [import("./markets/dto/open-flip.dto"), { "CreateOpenFlipDto": { type: { required: true, enum: t["./markets/constants/market-enums"].OpenFlipType } }, "DeleteOpenFlipDto": { created_at: { required: true, type: () => Date } } }], [import("./markets/dto/update-sub.dto"), { "UpdateMarketSubDto": {} }], [import("./markets/dto/create.dto"), { "BusinessHour": { days: { required: true, enum: t["./markets/constants/market-enums"].WeekDay, isArray: true }, open_time: { required: true, type: () => String }, close_time: { required: true, type: () => String } }, "CreateBankAccountDto": { holder_name: { required: true, type: () => String, minLength: 1, maxLength: 256 }, holder_type: { required: true, enum: t["./markets/constants/market-enums"].HolderType }, bank_number: { required: true, type: () => String, minLength: 3, maxLength: 3 }, agency_number: { required: true, type: () => String, minLength: 3, maxLength: 4 }, account_number: { required: true, type: () => String, minLength: 16, maxLength: 16 }, document: { required: true, type: () => String, minLength: 11, maxLength: 14 }, type: { required: true, enum: t["./markets/constants/market-enums"].BankAccountType } }, "CreateMarketDto": { type: { required: true, enum: t["./markets/constants/market-enums"].MarketsType }, name: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_street: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_number: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_district: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_city: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_state: { required: true, type: () => String, minLength: 2, maxLength: 2 }, address_complement: { required: false, type: () => String, minLength: 1, maxLength: 256 }, order_min: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, delivery_fee: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, markup: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, min_time: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, max_time: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, schedule_mins_interval: { required: false, type: () => Number, minimum: 1 }, schedule_max_days: { required: false, type: () => Number, maximum: 7, minimum: 1 }, info: { required: false, type: () => String, minLength: 1, maxLength: 256 }, document: { required: true, type: () => String, minLength: 14, maxLength: 14 }, payments_accepted: { required: true, type: () => [String], minLength: 1, maxLength: 256 }, pix_key: { required: false, type: () => String, minLength: 1, maxLength: 32 }, pix_key_type: { required: false, enum: t["./markets/constants/market-enums"].PixKeyType }, business_hours: { required: true, type: () => [t["./markets/dto/create.dto"].BusinessHour] }, bank_account: { required: false, type: () => t["./markets/dto/create.dto"].CreateBankAccountDto } } }], [import("./auth/dto/role.dto"), { "RoleDto": { role: { required: true, enum: t["./auth/constants/roles"].Role } }, "RoleWithoutSubDto": { role: { required: true, type: () => Object } } }], [import("./auth/dto/email.dto"), { "EmailDto": { email: { required: true, type: () => String, minLength: 1, maxLength: 256 } } }], [import("./auth/dto/validate.dto"), { "ValidateDto": { key: { required: true, type: () => String }, otp: { required: true, type: () => String } } }], [import("./orders/dto/full-order-id.dto"), { "FullOrderId": { order_id: { required: true, type: () => BigInt }, market_id: { required: true, type: () => String } } }], [import("./orders/dto/update.dto"), { "UpdateOrderBody": { action: { required: true, enum: t["./orders/constants/order-status"].OrderPublicAction }, confirmation_token: { required: false, type: () => String } }, "CreateConfirmationTokenBody": { missing_items: { required: false, type: () => [t["./orders/dto/update.dto"].OrderMissingItem] } }, "OrderMissingItem": { order_item_id: { required: true, type: () => BigInt }, quantity: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal } } }], [import("./orders/dto/find-many.dto"), { "FindManyOrdersDto": { after_id: { required: false, type: () => BigInt } } }], [import("./orders/dto/review.dto"), { "CreateReviewBody": { rating: { required: true, type: () => Number, maximum: 5, minimum: 1 }, complaint: { required: false, type: () => [String], minLength: 1, maxLength: 256 }, message: { required: false, type: () => String, minLength: 1, maxLength: 256 } }, "RespondReviewBody": { response: { required: true, type: () => String, minLength: 1, maxLength: 256 } } }], [import("./payments/dto/cancel-order.dto"), { "CancelOrderDto": { fullOrderId: { required: true, type: () => t["./orders/dto/full-order-id.dto"].FullOrderId } } }], [import("./payments/dto/complete-order.dto"), { "CompleteOrderDto": { fullOrderId: { required: true, type: () => t["./orders/dto/full-order-id.dto"].FullOrderId } } }], [import("./payments/dto/confirm-order-payment.dto"), { "ConfirmOrderPaymentDto": { fullOrderId: { required: true, type: () => t["./orders/dto/full-order-id.dto"].FullOrderId } } }], [import("./payments/dto/pay-order.dto"), { "PayOrderBaseDto": { fullOrderId: { required: true, type: () => t["./orders/dto/full-order-id.dto"].FullOrderId }, customer_id: { required: true, type: () => String }, total: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, market_amount: { required: true, type: () => Object }, payment_method: { required: true, enum: t["./payments/constants/payment-methods"].InAppPaymentMethod }, customer_debit: { required: false, type: () => Object }, debit_market_id: { required: false, type: () => String } }, "CardData": { payment_method: { required: true, type: () => String, enum: t["./payments/constants/payment-methods"].InAppPaymentMethod.Card }, card_token: { required: true, type: () => String }, ip: { required: true, type: () => String } }, "PixData": { payment_method: { required: true, type: () => String, enum: t["./payments/constants/payment-methods"].InAppPaymentMethod.Pix } } }], [import("./items/dto/feed.dto"), { "ItemFeed": { item_id: { required: true, type: () => String }, market_id: { required: true, type: () => String }, thumbhash: { required: true, type: () => Object }, market_thumbhash: { required: true, type: () => Object }, name: { required: true, type: () => String }, brand: { required: true, type: () => String, nullable: true }, quantity: { required: true, type: () => String }, is_kit: { required: true, type: () => Boolean }, discount_type: { required: true, type: () => Object, nullable: true }, discount_value_2: { required: true, type: () => Number, nullable: true }, discount_max_per_client: { required: true, type: () => Number, nullable: true }, images_names: { required: true, type: () => [String] }, price: { required: true, type: () => String }, prod_id: { required: true, type: () => BigInt, nullable: true }, unit_weight: { required: true, type: () => String, nullable: true }, discount_value_1: { required: true, type: () => String, nullable: true } }, "ItemOneFeed": { details: { required: true, type: () => [t["./items/dto/feed.dto"].ItemDetails] } }, "ItemDetails": { name: { required: true, type: () => String }, quantity: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal } } }], [import("./items/dto/create.dto"), { "LoggingDto": { data: { required: true, type: () => String } }, "CreateItemDto": { code: { required: true, type: () => BigInt }, market_price: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, stock: { required: false, type: () => Number, minimum: 1 }, unit_weight: { required: false, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, discount_type: { required: false, enum: t["./items/constants/discount-type"].DiscountType }, discount_value_1: { required: false, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, discount_value_2: { required: false, type: () => Number, minimum: 1 }, discount_max_per_client: { required: false, type: () => Number, minimum: 1 } }, "CreateKitDto": { kit_name: { required: true, type: () => String, minLength: 1, maxLength: 256 }, kit_quantity: { required: true, type: () => String, minLength: 1, maxLength: 256 }, kit_image_name: { required: true, type: () => String, minLength: 1, maxLength: 256 }, details: { required: true, type: () => [t["./items/dto/create.dto"].CreateDetailsDto] } }, "CreateDetailsDto": { quantity: { required: true, type: () => Number, minimum: 1 } } }], [import("./items/dto/full-item-id.dto"), { "FullItemId": { item_id: { required: true, type: () => String }, city_slug: { required: true, type: () => String } } }], [import("./items/dto/update.dto"), { "UpdateItemDto": {}, "UpdateKitDto": { details: { required: false, type: () => [t["./items/dto/update.dto"].UpdateDetailsDto] } }, "UpdateDetailsDto": { prod_id: { required: true, type: () => BigInt } } }], [import("./products/dto/create-category.dto"), { "CreateCategoryDto": { name: { required: true, type: () => String, minLength: 1, maxLength: 256 } } }], [import("./products/dto/create.dto"), { "CreateProductDto": { code: { required: false, type: () => BigInt }, name: { required: true, type: () => String, minLength: 1, maxLength: 256 }, brand: { required: false, type: () => String, minLength: 1, maxLength: 256 }, quantity: { required: false, type: () => String, minLength: 1, maxLength: 256 }, category_id: { required: true, type: () => Number, minimum: 1 }, images_names: { required: true, type: () => [String], minLength: 1, maxLength: 256 } } }], [import("./markets/dto/find-one.dto"), { "FindMarket": { city: { required: true, type: () => String }, market_id: { required: true, type: () => String } } }], [import("./markets/dto/upload-file.dto"), { "UploadFileDto": { picture: { required: true, type: () => String } } }], [import("./orders/dto/cancel.dto"), { "CancelOrderBody": { reason: { required: false, enum: t["./orders/constants/cancel-reasons"].CancelReason }, message: { required: false, type: () => String, minLength: 1, maxLength: 1000 } } }], [import("./orders/dto/retry-payment.dto"), { "RetryOrderPaymentBody": { payment_method: { required: true, enum: t["./payments/constants/payment-methods"].PaymentMethod }, card_id: { required: false, type: () => String, minLength: 1, maxLength: 256 } } }], [import("./orders/create-order/create-order.dto"), { "CreateOrderBody": { market_id: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_street: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_number: { required: true, type: () => String }, address_district: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_city: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_state: { required: true, type: () => String, minLength: 1, maxLength: 256 }, address_complement: { required: false, type: () => String, minLength: 1, maxLength: 256 }, address_latitude: { required: true, type: () => Number }, address_longitude: { required: true, type: () => Number }, is_scheduled: { required: true, type: () => Boolean }, paid_in_app: { required: true, type: () => Boolean }, payment_method: { required: true, enum: t["./payments/constants/payment-methods"].PaymentMethod }, payment_change: { required: false, type: () => String }, card_id: { required: false, type: () => String, minLength: 1, maxLength: 256 }, items: { required: true, type: () => [t["./orders/create-order/create-order.dto"].CreateOrderItem] }, client_total: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal } }, "CreateOrderItem": { item_id: { required: true, type: () => String, minLength: 1, maxLength: 256 }, quantity: { required: true, type: () => Number, maximum: 99, minimum: 1 } }, "OrderItemDto": { prod_id: { required: true, type: () => BigInt, nullable: true }, quantity: { required: true, type: () => Object }, price: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal }, is_kit: { required: true, type: () => Boolean }, details: { required: false, type: () => [t["./orders/create-order/create-order.dto"].OrderItemDetailsDto] } }, "OrderItemDetailsDto": { prod_id: { required: true, type: () => BigInt }, quantity: { required: true, type: () => Object } } }], [import("./orders/dto/subscribe.dto"), { "SubscribeOrdersDto": { order_id: { required: true, type: () => BigInt }, market_id: { required: true, type: () => String } } }], [import("./payments/dto/confirm-invoice.dto"), { "ConfirmInvoiceJobDto": { fullInvoiceId: { required: true, type: () => t["./markets/dto/full-invoice-id"].FullInvoiceId } } }], [import("./payments/dto/process-invoice.dto"), { "ProcessInvoiceDto": { fullInvoiceId: { required: true, type: () => t["./markets/dto/full-invoice-id"].FullInvoiceId }, market_id: { required: true, type: () => String }, amount: { required: true, type: () => t[".pnpm/@prisma+client@5.19.1_prisma@5.19.1/node_modules/@prisma/client/runtime/library"].Decimal } } }], [import("./chats/dto/create-chat-msg.dto"), { "CreateChatMsgDto": { market_id: { required: true, type: () => String }, order_id: { required: true, type: () => BigInt }, message: { required: true, type: () => String, minLength: 1, maxLength: 300 } } }]], "controllers": [[import("./auth/auth.controller"), { "AuthController": { "email": {}, "validate": { type: t["./responses/auth.res"].AuthTokenAndSessionRes }, "revalidate": { type: t["./responses/auth.res"].AccessTokenAndSessionRes }, "connect": { type: t["./responses/auth.res"].AccessTokenAndSessionRes }, "signOut": {} } }], [import("./customers/customers.controller"), { "CustomersController": { "create": { type: t["./responses/auth.res"].AccessTokenRes }, "socialLogin": { type: t["./responses/auth.res"].AccessTokenRes } }, "CustomersPrivateController": { "find": { type: Object }, "update": {}, "delete": {}, "createAddress": {}, "findAddresses": {}, "updateAddress": {}, "deleteAddress": {}, "createCard": {}, "findCards": {}, "updateCard": {}, "deleteCard": {} } }], [import("./items/items.controller"), { "ItemsController": { "feed": { type: [t["./items/dto/feed.dto"].ItemFeed] }, "feedByMarket": { type: [t["./items/dto/feed.dto"].ItemFeed] }, "findOne": { type: t["./items/dto/feed.dto"].ItemOneFeed } }, "ItemsPrivateController": { "logging": {}, "create": {}, "createKit": {}, "findOne": { type: [Object] }, "findActivities": { type: [Object] }, "findActivitiesById": { type: [Object] }, "update": {}, "updateKit": {}, "delete": { type: Object } } }], [import("./location/location.controller"), { "LocationController": { "addressFromCoords": { type: t["./location/dto/address.dto"].AddressRes }, "addressFromDocument": { type: t["./location/dto/address.dto"].AddressRes }, "coords": { type: t["./location/dto/coords.dto"].CoordsRes } } }], [import("./markets/markets.controller"), { "MarketsController": { "create": { type: t["./responses/auth.res"].AccessTokenAndSessionRes }, "findNotApproved": {}, "approve": {}, "findMany": { type: [Object] }, "findOne": {}, "findReviews": {} }, "MarketsPrivateController": { "findProfile": {}, "update": {}, "createOpenFlip": {}, "deleteOpenFlip": { type: Object }, "uploadFile": {}, "delete": {}, "createBankAccount": {}, "updateBankAccount": {}, "findInvoices": {}, "findCurrentPayout": {} } }], [import("./markets/market-subs.controller"), { "MarketSubsController": { "createSub": {}, "genConnectSub": { type: t["./responses/auth.res"].ConnectTokenRes }, "findManySubs": {}, "update": {}, "delete": {} }, "MarketSubsPrivateController": { "findOneSub": {} } }], [import("./orders/orders.controller"), { "OrdersCustomerController": { "findOne": { type: Object }, "retryPayment": {}, "review": {}, "cancel": {} }, "OrderCustomerAndMarketController": { "findMany": { type: Object } }, "OrderMarketController": { "update": {}, "respondReview": {} } }], [import("./orders/create-order/create-order.controller"), { "CreateOrderController": { "create": {} } }], [import("./payments/payments.controller"), { "PaymentsController": { "createCity": {} } }], [import("./products/products.controller"), { "ProductsController": { "create": {}, "createCategory": {} } }], [import("./chats/chats.controller"), { "ChatsController": { "create": {}, "findMany": {} } }]] } };
};