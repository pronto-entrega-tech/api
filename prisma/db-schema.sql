CREATE EXTENSION IF NOT EXISTS citext;
CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE categories (
  category_id smallint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL
);

/* CREATE TABLE nutrition_fact (
  name text NOT NULL,
  quantity text NOT NULL,
  VD text
); */

CREATE TABLE products (
  prod_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  code bigint UNIQUE,
  name text NOT NULL,
  brand text,
  quantity text,
  category_id smallint NOT NULL REFERENCES categories,
  thumbhash text,
  images_names text[],
  ts tsvector GENERATED ALWAYS AS (to_tsvector('portuguese', name)||to_tsvector('portuguese', brand)) STORED
  -- ingredients text,
  -- portion text,
  -- nutrition_facts nutrition_fact[]
);

CREATE TYPE markets_type AS ENUM ('SUPERMARKET', 'PHARMACIE', 'PET_SHOP', 'FAST_FOOD', 'LIQUOR_STORE');
CREATE TYPE pix_key_type AS ENUM ('CPF', 'CNPJ', 'EMAIL', 'PHONE', 'EVP');

CREATE TABLE market (
  market_id text PRIMARY KEY,
  city_slug text NOT NULL,
  approved boolean NOT NULL DEFAULT FALSE,
  in_debt boolean NOT NULL DEFAULT FALSE,
  deleted boolean NOT NULL DEFAULT FALSE,
  type markets_type NOT NULL,
  name text NOT NULL,
  thumbhash text,
  address_street text NOT NULL,
  address_number text NOT NULL,
  address_district text NOT NULL,
  address_city text NOT NULL,
  address_state text NOT NULL,
  address_complement text,
  address_latitude float NOT NULL,
  address_longitude float NOT NULL,
  location geometry NOT NULL GENERATED ALWAYS AS (ST_POINT(address_longitude, address_latitude)) STORED,
  order_min numeric(5,2) NOT NULL,
  delivery_fee numeric(4,2) NOT NULL,
  markup numeric(4,2) NOT NULL,
  min_time numeric(3) NOT NULL CONSTRAINT positive_time CHECK (min_time > 0),
  max_time numeric(3) NOT NULL CONSTRAINT higher_than_min CHECK (max_time > min_time),
  schedule_mins_interval smallint,
  schedule_max_days smallint,
  reviews_count_lately int,
  rating numeric(2,1),
  reviews_count_total bigint,
  info text,
  document text NOT NULL,
  payments_accepted text[],
  created_at timestamptz NOT NULL DEFAULT now(),
  email citext UNIQUE,
  pix_key text,
  pix_key_type pix_key_type,
  asaas_customer_id text,
  asaas_account_id text,
  asaas_account_key text
);

-- CREATE INDEX ON market (city_slug);
CREATE INDEX ON market USING GIST (location);

CREATE TYPE holder_type AS ENUM ('INDIVIDUAL', 'COMPANY');
CREATE TYPE bank_account_type AS ENUM ('CHECKING', 'SAVINGS');

CREATE TABLE bank_account (
  market_id text REFERENCES market (market_id) PRIMARY KEY,
  holder_name text NOT NULL,
  holder_type holder_type NOT NULL,
  bank_number text NOT NULL,
  agency_number text NOT NULL,
  account_number text NOT NULL,
  document text NOT NULL,
  type bank_account_type NOT NULL
);

CREATE TYPE week_day AS ENUM ('SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT');

CREATE TABLE business_hour (
  id bigint GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  market_id text NOT NULL REFERENCES market,
  days week_day[] NOT NULL,
  open_time text NOT NULL,
  close_time text NOT NULL CONSTRAINT higher_than_open CHECK (close_time::time > open_time::time)
);

CREATE TABLE special_day (
  id bigint GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  market_id text NOT NULL REFERENCES market,
  date date NOT NULL,
  reason_code smallint NOT NULL,
  reason_name text NOT NULL,
  open_time text NOT NULL,
  close_time text NOT NULL CONSTRAINT higher_than_open CHECK (close_time::time > open_time::time)
);

CREATE TYPE open_flip_type AS ENUM ('OPEN', 'CLOSE_UNTIL_NEXT_DAY', 'CLOSE_UNTIL_NEXT_OPEN');

CREATE TABLE open_flip (
  id bigint GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  market_id text NOT NULL REFERENCES market,
  created_at timestamptz NOT NULL DEFAULT now(),
  type open_flip_type NOT NULL
);

CREATE TYPE m_sub_permission AS ENUM ('STOCK', 'DELIVERY');

CREATE TABLE market_sub (
  id text NOT NULL PRIMARY KEY,
  market_id text NOT NULL REFERENCES market,
  created_at timestamptz NOT NULL DEFAULT now(),
  deleted boolean NOT NULL DEFAULT FALSE,
  name text NOT NULL,
  permissions m_sub_permission[] NOT NULL
);

CREATE INDEX ts_idx ON products USING GIN (ts);

CREATE TYPE discount_type AS ENUM ('DISCOUNT_VALUE', 'DISCOUNT_PERCENT', 'DISCOUNT_PERCENT_ON_SECOND', 'ONE_FREE');

CREATE TABLE item (
  item_id text NOT NULL,
  city_slug text NOT NULL,
  PRIMARY KEY (item_id, city_slug),
  market_id text NOT NULL REFERENCES market (market_id),
  prod_id bigint REFERENCES products (prod_id),
  market_price numeric(7,2) NOT NULL CONSTRAINT positive_price CHECK (market_price > 0), -- Price without markup
  stock int,
  unit_weight numeric(5,3) CONSTRAINT positive_weight CHECK (unit_weight > 0),
  is_kit boolean NOT NULL DEFAULT false,
  kit_name text,
  kit_quantity text,
  kit_image_name text,
  discount_type discount_type,
  discount_value_1 numeric(7,2),
  discount_value_2 smallint,
  discount_max_per_client smallint
) PARTITION BY LIST (city_slug);

CREATE TABLE item_details (
  id bigint GENERATED ALWAYS AS IDENTITY,
  item_id text NOT NULL,
  city_slug text NOT NULL,
  PRIMARY KEY (id, city_slug),
  FOREIGN KEY (item_id, city_slug) REFERENCES item(item_id, city_slug),
  prod_id bigint NOT NULL REFERENCES products (prod_id),
  quantity decimal(5, 3) NOT NULL
) PARTITION BY LIST (city_slug);

CREATE TYPE item_action AS ENUM ('CREATE', 'UPDATE', 'DELETE');

CREATE TABLE item_activity (
  id bigint GENERATED ALWAYS AS IDENTITY,
  market_id text NOT NULL REFERENCES market,
  PRIMARY KEY (id, market_id),
  market_sub_id text REFERENCES market_sub,
  item_id text,
  city_slug text,
  FOREIGN KEY (item_id, city_slug) REFERENCES item,
  product_code bigint,
  item_name text NOT NULL,
  action item_action,
  occurred_at timestamptz NOT NULL DEFAULT now(),
  new_price numeric(7, 2),
  new_stock int,
  new_unit_weight numeric(5, 3),
  new_discount json,
  new_details json[]
) PARTITION BY LIST (market_id);

CREATE TABLE admin (
  admin_id text PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  email citext UNIQUE NOT NULL
);

CREATE TYPE social_provider AS ENUM ('GOOGLE');

CREATE TABLE customer (
  customer_id text PRIMARY KEY,
  created_at timestamptz NOT NULL DEFAULT now(),
  email citext UNIQUE,
  name text NOT NULL,
  document text,
  phone text,
  asaas_id text,
  debit numeric(7,2),
  social_id text UNIQUE,
  social_provider social_provider
);

CREATE TABLE customer_address (
  id text NOT NULL,
  customer_id text NOT NULL REFERENCES customer,
  nickname text NOT NULL,
  street text NOT NULL,
  number text NOT NULL,
  district text NOT NULL,
  city text NOT NULL,
  state text NOT NULL,
  complement text,
  latitude float NOT NULL,
  longitude float NOT NULL,
  PRIMARY KEY (id, customer_id)
);

CREATE TABLE customer_card (
  id text NOT NULL,
  customer_id text NOT NULL REFERENCES customer,
  nickname text,
  brand text NOT NULL,
  last4 text NOT NULL,
  asaas_id text NOT NULL,
  PRIMARY KEY (id, customer_id)
);

CREATE TYPE market_invoice_status AS ENUM ('PENDING', 'PROCESSING', 'FAILED', 'REQUIRES_ACTION','COMPLETED');

CREATE TABLE market_invoice (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  market_id text NOT NULL REFERENCES market,
  month date NOT NULL,
  PRIMARY KEY (id, month),
  UNIQUE (market_id, month),
  status market_invoice_status NOT NULL DEFAULT 'PENDING',
  paid_at timestamptz,
  amount numeric(7,2) NOT NULL,
  payment_id text,
  boleto_code text,
  boleto_pdf_url text,
  boleto_expires_at timestamptz,
  pix_code text,
  pix_expires_at timestamptz
) PARTITION BY LIST (month);

CREATE TABLE market_payout (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  market_id text NOT NULL REFERENCES market,
  month date NOT NULL,
  PRIMARY KEY (id, month),
  UNIQUE (market_id, month),
  amount numeric(7,2) NOT NULL DEFAULT 0,
  is_paid boolean NOT NULL DEFAULT false,
  paid_at timestamptz,
  payment_id text
) PARTITION BY LIST (month);

CREATE TYPE role AS ENUM ('ADMIN', 'CUSTOMER', 'MARKET', 'MARKET_SUB');

CREATE TABLE otp (
  otp_id uuid PRIMARY KEY,
  otp text NOT NULL,
  email citext NOT NULL,
  role role NOT NULL,
  expires_in timestamptz NOT NULL
);

CREATE TABLE session (
  session_id uuid PRIMARY KEY,
  -- family_id uuid,
  -- role roles NOT NULL,
  -- active boolean NOT NULL DEFAULT true,
  expires_in timestamptz NOT NULL
);

CREATE TABLE admin_session (
  admin_id text NOT NULL REFERENCES admin
) INHERITS (session);

CREATE TABLE customer_session (
  customer_id text NOT NULL REFERENCES customer
) INHERITS (session);

CREATE TABLE market_session (
  market_id text NOT NULL REFERENCES market
) INHERITS (session);

CREATE TABLE market_sub_session (
  market_sub_id text NOT NULL REFERENCES market_sub
) INHERITS (session);

CREATE TYPE order_status AS ENUM (
  'PAYMENT_PROCESSING',
  'PAYMENT_FAILED',
  'PAYMENT_REQUIRE_ACTION',
  'APPROVAL_PENDING',
  'PROCESSING',
  'DELIVERY_PENDING',
  'COMPLETING',
  'COMPLETED',
  'CANCELING',
  'CANCELED'
);

CREATE TYPE payment_method AS ENUM ('CASH', 'CARD', 'PIX');

CREATE TABLE orders (
  order_id bigint GENERATED BY DEFAULT AS IDENTITY,
  market_id text NOT NULL REFERENCES market,
  PRIMARY KEY (order_id, market_id),
  market_order_id bigint NOT NULL,
  customer_id text NOT NULL REFERENCES customer,
  status order_status NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  finished_at timestamptz,
  delivery_min_time timestamptz NOT NULL,
  delivery_max_time timestamptz NOT NULL,
  delivery_fee numeric(7,2) NOT NULL,
  total numeric(7,2) NOT NULL,
  market_amount numeric(7,2) NOT NULL,
  customer_debit numeric(7,2),
  credit_used numeric(7,2),
  debit_amount numeric(7,2),
  debit_market_id text REFERENCES market,
  ip text,
  is_scheduled boolean NOT NULL,
  paid_in_app boolean NOT NULL,
  payment_id text,
  payment_method payment_method NOT NULL,
  payment_description text NOT NULL,
  payment_change numeric(7,2),
  card_token text,
  pix_code text,
  pix_expires_at timestamptz,
  cancel_reason text,
  cancel_message text,
  address_street text NOT NULL,
  address_number text NOT NULL,
  address_district text NOT NULL,
  address_city text NOT NULL,
  address_state text NOT NULL,
  address_complement text,
  address_latitude float NOT NULL,
  address_longitude float NOT NULL
) PARTITION BY LIST (market_id);

-- CREATE INDEX ON orders (customer_id);
-- CREATE INDEX orders_status_incomplete_idx ON orders (status) WHERE NOT (status = 0);
-- CREATE INDEX ON orders (created_at);

--CREATE TABLE orders_3 PARTITION OF orders FOR VALUES IN (3);
-- ALTER TABLE orders_1 ADD CONSTRAINT orders_1_market_order_id_key UNIQUE (market_order_id);

CREATE TABLE order_item (
  id bigint GENERATED ALWAYS AS IDENTITY,
  market_id text NOT NULL,
  PRIMARY KEY (id, market_id),
  order_id bigint NOT NULL,
  FOREIGN KEY (order_id, market_id) REFERENCES orders(order_id, market_id),
  prod_id bigint,
  quantity numeric(5,3) NOT NULL CONSTRAINT positive_quantity CHECK (quantity > 0),
  price numeric(7,2) NOT NULL CONSTRAINT positive_price CHECK (price > 0),
  is_kit boolean NOT NULL DEFAULT(false)
) PARTITION BY LIST (market_id);

CREATE TABLE order_item_details (
  id bigint GENERATED ALWAYS AS IDENTITY,
  market_id text NOT NULL,
  PRIMARY KEY (order_item_id, market_id),
  order_item_id bigint NOT NULL,
  FOREIGN KEY (order_item_id, market_id) REFERENCES order_item,
  prod_id bigint NOT NULL REFERENCES products,
  quantity decimal(5, 3) NOT NULL
) PARTITION BY LIST (market_id);

CREATE TABLE order_missing_item (
  order_item_id bigint NOT NULL,
  market_id text NOT NULL,
  PRIMARY KEY (order_item_id, market_id),
  FOREIGN KEY (order_item_id, market_id) REFERENCES order_item,
  order_id bigint NOT NULL,
  FOREIGN KEY (order_id, market_id) REFERENCES orders(order_id, market_id),
  quantity numeric(5,3) NOT NULL
) PARTITION BY LIST (market_id);

CREATE TABLE review (
  order_id bigint NOT NULL,
  market_id text NOT NULL REFERENCES market,
  PRIMARY KEY (order_id, market_id),
  FOREIGN KEY (order_id, market_id) REFERENCES orders(order_id, market_id),
  customer_id text NOT NULL REFERENCES customer,
  created_at timestamptz NOT NULL DEFAULT now(),
  rating smallint NOT NULL,
  complaint text[],
  message text,
  response text
) PARTITION BY LIST (market_id);

-- CREATE INDEX ON review (customer_id);


CREATE TYPE chat_message_author AS ENUM ('CUSTOMER', 'MARKET');

CREATE TABLE chat_message (
  id bigint GENERATED BY DEFAULT AS IDENTITY,
  customer_id text NOT NULL REFERENCES customer,
  PRIMARY KEY (id, customer_id),
  market_id text NOT NULL REFERENCES market,
  order_id bigint NOT NULL,
  FOREIGN KEY (order_id, market_id) REFERENCES orders(order_id, market_id),
  market_order_id bigint NOT NULL,
  author chat_message_author NOT NULL,
  created_at timestamptz NOT NULL DEFAULT now(),
  message text NOT NULL
) PARTITION BY LIST (customer_id);
