// After change this file, run:
// pnpm gen-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  category_id Int        @id @default(autoincrement()) @db.SmallInt
  name        String
  products    products[]
}

model products {
  prod_id            BigInt                   @id @default(autoincrement())
  code               BigInt?                  @unique
  name               String
  brand              String?
  quantity           String?
  category_id        Int                      @db.SmallInt
  images_names       String[]
  ts                 Unsupported("tsvector")? @default(dbgenerated("to_tsvector('portuguese', name)||to_tsvector('portuguese', brand)"))
  categories         categories?              @relation(fields: [category_id], references: [category_id])
  items              item[]
  details            item_details[]
  order_items        order_item[]
  order_item_details order_item_details[]

  // @@index([category_id])
  @@index([ts], map: "ts_idx")
}

model item {
  item_id                 String          @default(cuid())
  city_slug               String
  market_id               String
  prod_id                 BigInt?
  market_price            Decimal         @db.Decimal(7, 2)
  stock                   Int?
  unit_weight             Decimal?        @db.Decimal(5, 3)
  is_kit                  Boolean         @default(false)
  kit_name                String?
  kit_quantity            String?
  kit_image_name          String?
  discount_type           discount_type?
  discount_value_1        Decimal?        @db.Decimal(7, 2)
  discount_value_2        Int?            @db.SmallInt
  discount_max_per_client Int?            @db.SmallInt
  market                  market          @relation(fields: [market_id], references: [market_id])
  product                 products?       @relation(fields: [prod_id], references: [prod_id])
  details                 item_details[]
  activities              item_activity[]

  // @@index([market_id])
  // @@index([prod_id])
  @@id([item_id, city_slug])
}

model item_details {
  id        BigInt   @default(autoincrement())
  item      item     @relation(fields: [item_id, city_slug], references: [item_id, city_slug])
  item_id   String
  city_slug String
  product   products @relation(fields: [prod_id], references: [prod_id])
  prod_id   BigInt
  quantity  Decimal  @db.Decimal(5, 3)

  @@id([id, city_slug])
}

model item_activity {
  id              BigInt      @default(autoincrement())
  market          market      @relation(fields: [market_id], references: [market_id])
  market_id       String
  market_sub      market_sub? @relation(fields: [market_sub_id], references: [id])
  market_sub_id   String?
  item            item?       @relation(fields: [item_id, city_slug], references: [item_id, city_slug])
  item_id         String?
  city_slug       String?
  product_code    BigInt?
  item_name       String
  action          item_action
  occurred_at     DateTime    @default(now()) @db.Timestamptz(6)
  new_price       Decimal?    @db.Decimal(7, 2)
  new_stock       Int?
  new_unit_weight Decimal?    @db.Decimal(5, 3)
  new_discount    Json?
  new_details     Json[]

  @@id([id, market_id])
}

model admin {
  admin_id   String          @id @default(cuid())
  created_at DateTime        @default(now()) @db.Timestamptz(6)
  email      String          @unique @db.Citext
  sessions   admin_session[]
}

model customer {
  customer_id     String             @id @default(cuid())
  created_at      DateTime           @default(now()) @db.Timestamptz(6)
  email           String?            @unique @db.Citext
  name            String
  document        String?
  phone           String?
  asaas_id        String?
  debit           Decimal?           @db.Decimal(7, 2)
  social_provider social_provider?
  orders          orders[]
  reviews         review[]
  addresses       customer_address[]
  sessions        customer_session[]
  cards           customer_card[]
  chat_message    chat_message[]
}

model customer_address {
  id          String   @default(cuid())
  customer_id String
  nickname    String?
  street      String
  number      String
  district    String
  city        String
  state       String
  complement  String?
  latitude    Float
  longitude   Float
  customer    customer @relation(fields: [customer_id], references: [customer_id])

  @@id([id, customer_id])
}

model customer_card {
  id          String   @default(cuid())
  customer    customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String
  nickname    String?
  brand       String
  last4       String
  asaas_id    String

  @@id([id, customer_id])
}

model market {
  market_id              String                   @id @default(cuid())
  city_slug              String
  approved               Boolean                  @default(false)
  in_debt                Boolean                  @default(false)
  type                   market_type
  name                   String
  address_street         String
  address_number         String
  address_district       String
  address_city           String
  address_state          String
  address_complement     String?
  address_latitude       Float
  address_longitude      Float
  location               Unsupported("geometry")? @default(dbgenerated("ST_POINT(address_longitude, address_latitude)"))
  order_min              Decimal                  @db.Decimal(5, 2)
  delivery_fee           Decimal                  @db.Decimal(4, 2)
  markup                 Decimal                  @db.Decimal(4, 2)
  min_time               Decimal                  @db.Decimal(3, 0)
  max_time               Decimal                  @db.Decimal(3, 0)
  schedule_mins_interval Int?                     @db.SmallInt
  schedule_max_days      Int?                     @db.SmallInt
  rating                 Decimal?                 @db.Decimal(2, 1)
  reviews_count_lately   Int?
  reviews_count_total    BigInt?
  info                   String?
  document               String
  payments_accepted      String[]
  created_at             DateTime                 @default(now()) @db.Timestamptz(6)
  email                  String?                  @unique @db.Citext
  pix_key                String?
  pix_key_type           pix_key_type?
  asaas_customer_id      String?
  asaas_account_id       String?
  asaas_account_key      String?
  bank_account           bank_account?
  business_hours         business_hour[]
  special_days           special_day[]
  open_flips             open_flip[]
  items                  item[]
  item_activities        item_activity[]
  invoices               market_invoice[]
  payouts                market_payout[]
  sessions               market_session[]
  market_subs            market_sub[]
  orders                 orders[]
  ordersWithDebit        orders[]                 @relation("debit_order")
  reviews                review[]
  chat_message           chat_message[]

  @@index([location])
}

model bank_account {
  market         market            @relation(fields: [market_id], references: [market_id])
  market_id      String            @id
  holder_name    String
  holder_type    holder_type
  bank_number    String
  agency_number  String
  // agency_digit String
  account_number String
  // account_digit String
  type           bank_account_type
  document       String
}

model business_hour {
  id         BigInt     @id @default(autoincrement())
  market     market     @relation(fields: [market_id], references: [market_id])
  market_id  String
  days       week_day[]
  open_time  String
  close_time String
}

model special_day {
  id          BigInt   @id @default(autoincrement())
  market      market   @relation(fields: [market_id], references: [market_id])
  market_id   String
  date        DateTime @db.Date
  reason_code Int      @db.SmallInt
  reason_name String
  open_time   String
  close_time  String
}

model open_flip {
  id         BigInt         @id @default(autoincrement())
  market     market         @relation(fields: [market_id], references: [market_id])
  market_id  String
  created_at DateTime       @default(now()) @db.Timestamptz(6)
  type       open_flip_type
}

model market_invoice {
  id                BigInt                @default(autoincrement())
  month             DateTime              @db.Date
  market            market                @relation(fields: [market_id], references: [market_id])
  market_id         String
  status            market_invoice_status @default(PENDING)
  amount            Decimal               @db.Decimal(7, 2)
  payment_id        String?
  paid_at           DateTime?             @db.Timestamptz(6)
  boleto_code       String?
  boleto_pdf_url    String?
  boleto_expires_at DateTime?             @db.Timestamptz(6)
  pix_code          String?
  pix_expires_at    DateTime?             @db.Timestamptz(6)

  @@id([id, month])
  @@unique([market_id, month])
}

model market_payout {
  id         BigInt    @default(autoincrement())
  month      DateTime  @db.Date
  market     market    @relation(fields: [market_id], references: [market_id])
  market_id  String
  amount     Decimal   @default(0) @db.Decimal(7, 2)
  is_paid    Boolean   @default(false)
  paid_at    DateTime? @db.Timestamptz(6)
  payment_id String?

  @@id([id, month])
  @@unique([market_id, month])
}

model market_sub {
  id              String               @id @default(cuid())
  market_id       String
  created_at      DateTime             @default(now()) @db.Timestamptz(6)
  deleted         Boolean              @default(false)
  name            String
  permissions     m_sub_permission[]
  market          market               @relation(fields: [market_id], references: [market_id])
  sessions        market_sub_session[]
  item_activities item_activity[]
}

model otp {
  otp_id     String   @id @default(uuid()) @db.Uuid
  otp        String
  email      String   @db.Citext
  role       roles
  expires_in DateTime @db.Timestamptz(6)
}

model admin_session {
  session_id String   @id @default(uuid()) @db.Uuid
  expires_in DateTime @db.Timestamptz(6)
  user_id    String   @map("admin_id")
  admin      admin    @relation(fields: [user_id], references: [admin_id])
}

model customer_session {
  session_id String   @id @default(uuid()) @db.Uuid
  expires_in DateTime @db.Timestamptz(6)
  user_id    String   @map("customer_id")
  customer   customer @relation(fields: [user_id], references: [customer_id])
}

model market_session {
  session_id String   @id @default(uuid()) @db.Uuid
  expires_in DateTime @db.Timestamptz(6)
  user_id    String   @map("market_id")
  market     market   @relation(fields: [user_id], references: [market_id])
}

model market_sub_session {
  session_id String     @id @default(uuid()) @db.Uuid
  expires_in DateTime   @db.Timestamptz(6)
  user_id    String     @map("market_sub_id")
  market_sub market_sub @relation(fields: [user_id], references: [id])
}

model orders {
  order_id            BigInt               @default(autoincrement())
  market_id           String
  market_order_id     BigInt
  customer_id         String
  status              order_status
  created_at          DateTime             @default(now()) @db.Timestamptz(6)
  finished_at         DateTime?            @db.Timestamptz(6)
  delivery_min_time   DateTime             @db.Timestamptz(6)
  delivery_max_time   DateTime             @db.Timestamptz(6)
  delivery_fee        Decimal              @db.Decimal(7, 2)
  total               Decimal              @db.Decimal(7, 2)
  market_amount       Decimal              @db.Decimal(7, 2)
  customer_debit      Decimal?             @db.Decimal(7, 2)
  credit_used         Decimal?             @db.Decimal(7, 2)
  debit_amount        Decimal?             @db.Decimal(7, 2)
  debit_market_id     String?
  ip                  String?
  is_scheduled        Boolean
  paid_in_app         Boolean
  payment_id          String?
  payment_method      payment_method
  payment_description String
  payment_change      Decimal?             @db.Decimal(7, 2)
  card_token          String?
  pix_code            String?
  pix_expires_at      DateTime?            @db.Timestamptz(6)
  cancel_reason       String?
  cancel_message      String?
  address_street      String
  address_number      String
  address_district    String
  address_city        String
  address_state       String
  address_complement  String?
  address_latitude    Float
  address_longitude   Float
  market              market               @relation(fields: [market_id], references: [market_id])
  debit_market        market?              @relation("debit_order", fields: [debit_market_id], references: [market_id])
  customer            customer             @relation(fields: [customer_id], references: [customer_id])
  review              review?
  items               order_item[]
  missing_items       order_missing_item[]
  chat_message        chat_message[]

  @@id([order_id, market_id])
}

model order_item {
  id        BigInt               @default(autoincrement())
  orders    orders               @relation(fields: [order_id, market_id], references: [order_id, market_id])
  market_id String
  order_id  BigInt
  product   products?            @relation(fields: [prod_id], references: [prod_id])
  prod_id   BigInt?
  quantity  Decimal              @db.Decimal(5, 3)
  price     Decimal              @db.Decimal(7, 2)
  is_kit    Boolean              @default(false)
  details   order_item_details[]
  missing   order_missing_item?

  @@id([id, market_id])
}

model order_item_details {
  id            BigInt     @default(autoincrement())
  order_item    order_item @relation(fields: [order_item_id, market_id], references: [id, market_id])
  market_id     String
  order_item_id BigInt
  product       products   @relation(fields: [prod_id], references: [prod_id])
  prod_id       BigInt
  quantity      Decimal    @db.Decimal(5, 3)

  @@id([id, market_id])
}

model order_missing_item {
  order_item    order_item @relation(fields: [order_item_id, market_id], references: [id, market_id])
  order_item_id BigInt
  market_id     String
  orders        orders     @relation(fields: [order_id, market_id], references: [order_id, market_id])
  order_id      BigInt
  quantity      Decimal    @db.Decimal(5, 3)

  @@id([order_item_id, market_id])
}

model review {
  market_id   String
  customer_id String
  order_id    BigInt
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  rating      Int      @db.SmallInt
  complaint   String[]
  message     String?
  response    String?
  market      market   @relation(fields: [market_id], references: [market_id])
  customer    customer @relation(fields: [customer_id], references: [customer_id])
  order       orders   @relation(fields: [order_id, market_id], references: [order_id, market_id])

  @@id([order_id, market_id])
}

model chat_message {
  id              BigInt              @default(autoincrement())
  customer        customer            @relation(fields: [customer_id], references: [customer_id])
  customer_id     String
  market          market              @relation(fields: [market_id], references: [market_id])
  market_id       String
  order           orders              @relation(fields: [order_id, market_id], references: [order_id, market_id])
  order_id        BigInt
  market_order_id BigInt
  created_at      DateTime            @default(now()) @db.Timestamptz(6)
  author          chat_message_author
  message         String

  @@id([id, market_id])
}

enum discount_type {
  DISCOUNT_VALUE
  DISCOUNT_PERCENT
  DISCOUNT_PERCENT_ON_SECOND
  ONE_FREE
}

enum item_action {
  CREATE
  UPDATE
  DELETE
}

enum market_type {
  SUPERMARKET
  PHARMACY
  PET_SHOP
  FAST_FOOD
  LIQUOR_STORE
}

enum pix_key_type {
  CPF
  CNPJ
  EMAIL
  PHONE
  EVP
}

enum holder_type {
  INDIVIDUAL
  COMPANY
}

enum bank_account_type {
  CHECKING
  SAVINGS
}

enum week_day {
  SUN
  MON
  TUE
  WED
  THU
  FRI
  SAT
}

enum open_flip_type {
  OPEN
  CLOSE_UNTIL_NEXT_DAY
  CLOSE_UNTIL_NEXT_OPEN
}

enum order_status {
  PAYMENT_PROCESSING
  PAYMENT_FAILED
  PAYMENT_REQUIRE_ACTION
  APPROVAL_PENDING
  PROCESSING
  DELIVERY_PENDING
  COMPLETING
  COMPLETED
  CANCELING
  CANCELED
}

enum market_invoice_status {
  PROCESSING
  PENDING
  PAID
}

enum social_provider {
  GOOGLE
}

enum payment_method {
  CASH
  CARD
  PIX
}

enum roles {
  ADMIN
  CUSTOMER
  MARKET
  MARKET_SUB
}

enum m_sub_permission {
  STOCK
  DELIVERY
}

enum chat_message_author {
  CUSTOMER
  MARKET
}
